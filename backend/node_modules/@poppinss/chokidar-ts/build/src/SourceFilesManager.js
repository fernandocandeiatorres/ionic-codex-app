"use strict";
/*
 * @poppinss/chokidar-ts
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceFilesManager = void 0;
const mem_1 = __importDefault(require("mem"));
const debug_1 = __importDefault(require("debug"));
const path_1 = require("path");
const os_1 = require("os");
const picomatch_1 = __importDefault(require("picomatch"));
const BACK_SLASH_REGEX = /\\/g;
const debug = (0, debug_1.default)('tsc:source:manager');
/**
 * Exposes the API to manage the source files for a typescript project. You need
 * full blown source files management during the watch mode, since new files
 * are added and removed regularly.
 */
class SourceFilesManager {
    constructor(appRoot, options) {
        this.appRoot = appRoot;
        this.options = options;
        this.isWindows = (0, os_1.platform)() === 'win32';
        /**
         * Pattern matcher for included files
         */
        this.whitelisted = (0, picomatch_1.default)((this.options.includes || []).map((pattern) => {
            return this.normalizeSlashToUnix((0, path_1.join)(this.appRoot, pattern));
        }));
        /**
         * Pattern matcher for excluded files
         */
        this.blacklisted = (0, picomatch_1.default)((this.options.excludes || []).map((pattern) => {
            return this.normalizeSlashToUnix((0, path_1.join)(this.appRoot, pattern));
        }));
        /**
         * An array of project files collected as part of the first scan. We need
         * an object here, so that we can share it by reference with the
         * typescript language server.
         */
        this.projectFiles = {};
        /**
         * A memoized function to match the file path against the whitelisted
         * and blacklisted patterns
         */
        this.matchAgainstPattern = (0, mem_1.default)((filePath) => {
            filePath = this.normalizeSlashToUnix(filePath);
            if (!this.whitelisted(filePath)) {
                return false;
            }
            if (this.blacklisted(filePath)) {
                return false;
            }
            return true;
        });
        this.options.files.forEach((file) => this.add(file));
    }
    /**
     * Normalizes windows slashes to unix. Since, glob patterns
     * are not paths, they are not normalized for cross platform
     * checks and hence we have to convert all paths to unix.
     */
    normalizeSlashToUnix(path) {
        if (!this.isWindows) {
            return path;
        }
        return path.replace(BACK_SLASH_REGEX, '/');
    }
    /**
     * Add a new source file to the list of project files. This is helpful
     * when new source files are added after the initial typescript
     * build.
     */
    add(filePath) {
        filePath = this.normalizeSlashToUnix(filePath);
        this.projectFiles[filePath] = this.projectFiles[filePath] || { version: 1 };
        debug('adding new source file "%s"', filePath);
    }
    /**
     * Bumps the project file version. This is required to tell the
     * typescript compiler that file has been changed.
     */
    bumpVersion(filePath) {
        filePath = this.normalizeSlashToUnix(filePath);
        const projectFile = this.projectFiles[filePath];
        if (!projectFile) {
            return;
        }
        projectFile.version++;
        debug('source file version bump "%s:%d"', filePath, projectFile.version);
    }
    /**
     * Remove file from the list of existing source files
     */
    remove(filePath) {
        filePath = this.normalizeSlashToUnix(filePath);
        debug('removing source file "%s"', filePath);
        delete this.projectFiles[filePath];
    }
    /**
     * Returns true when filePath is part of the source files after checking
     * them against `includes`, `excludes` and custom set of `files`.
     */
    isSourceFile(filePath) {
        filePath = this.normalizeSlashToUnix(filePath);
        return !!this.projectFiles[filePath] || this.matchAgainstPattern(filePath);
    }
    /**
     * Returns file version
     */
    getFileVersion(filePath) {
        filePath = this.normalizeSlashToUnix(filePath);
        const projectFile = this.projectFiles[filePath];
        return projectFile ? projectFile.version : null;
    }
    /**
     * Returns a copy of project source files
     */
    toJSON() {
        return this.projectFiles;
    }
}
exports.SourceFilesManager = SourceFilesManager;
