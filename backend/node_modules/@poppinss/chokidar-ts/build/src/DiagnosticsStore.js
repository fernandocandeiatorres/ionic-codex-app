"use strict";
/*
 * @poppinss/chokidar-ts
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticsStore = void 0;
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)('tsc:diagnostic:store');
/**
 * Exposes the API to collect typescript project diagnostics. We start by
 * consuming the diagnostics for the entire project in reference to the
 * file paths. As files are changed, we update the diagnostics for
 * that file itself.
 */
class DiagnosticsStore {
    constructor() {
        this.diagnostics = new Map();
        debug('initiating diagnostics store');
    }
    /**
     * Consumes diagnostics for the entire project
     */
    bulkAdd(diagnostics) {
        diagnostics.forEach((diagnostic) => {
            if (!diagnostic.file) {
                return;
            }
            const fileName = diagnostic.file.fileName;
            debug('adding diagnostics for "%s" file', fileName);
            if (!this.diagnostics.has(fileName)) {
                this.diagnostics.set(fileName, []);
            }
            this.diagnostics.get(fileName).push(diagnostic);
        });
    }
    /**
     * Add diagnostics for a given file
     */
    add(filePath, diagnostics) {
        /**
         * Narrow down the map size, since we need to serialize it
         * quite often
         */
        if (!diagnostics.length) {
            this.remove(filePath);
            return;
        }
        debug('adding diagnostics for "%s" file', filePath);
        this.diagnostics.set(filePath, diagnostics);
    }
    /**
     * Remove diagnostics for a given file
     */
    remove(filePath) {
        if (this.diagnostics.has(filePath)) {
            debug('removing diagnostics for "%s" file', filePath);
            this.diagnostics.delete(filePath);
        }
    }
    /**
     * Returns an array of all the diagnostics
     */
    toJSON() {
        let serialized = [];
        this.diagnostics.forEach((diagnostics) => (serialized = serialized.concat(diagnostics)));
        return serialized;
    }
}
exports.DiagnosticsStore = DiagnosticsStore;
