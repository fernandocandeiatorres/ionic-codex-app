"use strict";
/*
 * @poppinss/chokidar-ts
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypescriptCompiler = void 0;
const Builder_1 = require("./Builder");
const Watcher_1 = require("./Watcher");
const LspWatcher_1 = require("./LspWatcher");
const ConfigParser_1 = require("./ConfigParser");
const PluginManager_1 = require("./PluginManager");
/**
 * Typescript compiler exposes the API to build, watch or parse
 * the typescript config file.
 */
class TypescriptCompiler {
    constructor(cwd, configFileName, ts) {
        this.cwd = cwd;
        this.configFileName = configFileName;
        this.ts = ts;
        this.pluginManager = new PluginManager_1.PluginManager();
    }
    /**
     * Add plugin which can apply transformers to the typescript compiler
     */
    use(transformer, lifecycle) {
        this.pluginManager.use(transformer, lifecycle);
        return this;
    }
    /**
     * Get builder instance
     */
    builder(options) {
        return new Builder_1.Builder(this.ts, options, this.pluginManager);
    }
    /**
     * Get watcher instance
     */
    watcher(options, mode) {
        return mode === 'raw'
            ? new Watcher_1.Watcher(this.cwd, this.ts, options, this.pluginManager)
            : new LspWatcher_1.LspWatcher(this.cwd, this.ts, options, this.pluginManager);
    }
    /**
     * Get config parser instance
     */
    configParser() {
        return new ConfigParser_1.ConfigParser(this.cwd, this.configFileName, this.ts);
    }
}
exports.TypescriptCompiler = TypescriptCompiler;
