import chokidar from 'chokidar';
import Emittery from 'emittery';
import tsStatic from 'typescript';
import { WatcherEvents } from './Contracts';
import { PluginManager } from './PluginManager';
/**
 * Exposes the API to build the typescript project and then watch it
 * for changes.
 */
export declare class LspWatcher extends Emittery<WatcherEvents & {
    'watcher:ready': undefined;
}> {
    private cwd;
    private ts;
    private config;
    private pluginManager;
    /**
     * Available only in LSP mode
     */
    private referenceTree;
    private diagnosticsStore;
    private moduleResolver;
    private languageService;
    /**
     * Available only in both modes
     */
    private sourceFilesManager;
    chokidar: chokidar.FSWatcher;
    program: tsStatic.Program;
    host: tsStatic.CompilerHost;
    compilerOptions?: tsStatic.CompilerOptions;
    constructor(cwd: string, ts: typeof tsStatic, config: tsStatic.ParsedCommandLine, pluginManager: PluginManager);
    /**
     * Returns a boolean telling if it is a script file or not.
     *
     * We check for the `compilerOptions.allowJs` before marking
     * `.js` files as a script files.
     */
    private isScriptFile;
    /**
     * Returns resolved imports from the source text
     */
    private getSourceImports;
    /**
     * Initiates the source file manager to track the source files as they
     * are added, changed and removed
     */
    private initiateSourceFileManager;
    /**
     * Initiates the diagnostic store to store diagnostic messages
     */
    private initiateDiagnosticsStore;
    /**
     * Initiates the module resolver. We need it to resolve imports
     */
    private initiateModuleResolver;
    /**
     * Initiates the reference tree to track module dependencies
     */
    private initiateReferenceTree;
    /**
     * Initiates chokidar watcher
     */
    private initiateWatcher;
    /**
     * Initiates the language service. We can use the service instance to
     * re-compile files, without re-building the entire project
     */
    private initiateLanguageService;
    /**
     * Process the diagnostics for a given file by adding
     * them to the diagnostics store.
     */
    private processFileDiagnostics;
    /**
     * Rebuilds the source file without writing it's compiled output
     * to the disk. Following operations are peformed.
     *
     * 1. File is re-compiled
     * 2. File diagnostics are updated in the store.
     * 3. Reference tree is updated with new imports.
     */
    private reBuildSourceFile;
    /**
     * Process the source file
     */
    private processSourceFile;
    /**
     * Invoked when chokidar notifies for a new file addtion
     */
    private onNewFile;
    /**
     * Invoked when chokidar notifies for changes the existing
     * source file
     */
    private onChange;
    /**
     * Invoked when chokidar notifies for file deletion
     */
    private onRemove;
    /**
     * Build and watch project for changes
     */
    watch(watchPattern?: string | string[], watcherOptions?: chokidar.WatchOptions): {
        skipped: boolean;
        diagnostics: tsStatic.Diagnostic[];
    };
}
