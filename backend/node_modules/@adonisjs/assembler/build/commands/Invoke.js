"use strict";
/*
 * @adonisjs/assembler
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const sink_1 = require("@adonisjs/sink");
const standalone_1 = require("@adonisjs/core/build/standalone");
const Manifest_1 = require("../src/Manifest");
/**
 * Configure a package
 */
class Configure extends standalone_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.appType = process.env['ADONIS_CREATE_APP_BOILERPLATE'] || 'web';
    }
    /**
     * Returns package manager for installing dependencies
     */
    getPackageManager() {
        if (process.env['ADONIS_CREATE_APP_CLIENT']) {
            return process.env['ADONIS_CREATE_APP_CLIENT'];
        }
        return sink_1.utils.getPackageManager(this.application.appRoot);
    }
    /**
     * Configure encore
     */
    async configureEncore() {
        /**
         * Create the webpack config file
         */
        const webpackConfigFile = new sink_1.files.MustacheFile(this.application.appRoot, 'webpack.config.js', (0, path_1.join)(__dirname, '..', 'templates/webpack.config.txt'));
        if (!webpackConfigFile.exists()) {
            webpackConfigFile.apply({}).commit();
            sink_1.logger.action('create').succeeded('webpack.config.js');
        }
        /**
         * Create app.js entrypoint
         */
        const entryPointFile = new sink_1.files.NewLineFile(this.application.appRoot, 'resources/js/app.js');
        if (!entryPointFile.exists()) {
            entryPointFile.add('// app entrypoint').commit();
            sink_1.logger.action('create').succeeded('resources/js/app.js');
        }
        /**
         * Install Encore
         */
        const pkgFile = new sink_1.files.PackageJsonFile(this.application.appRoot);
        pkgFile.install('@symfony/webpack-encore@4.1.1');
        pkgFile.install('webpack@^5.72');
        pkgFile.install('webpack-cli@^4.9.1');
        pkgFile.install('@babel/core@^7.17.0');
        pkgFile.install('@babel/preset-env@^7.16.0');
        pkgFile.useClient(this.getPackageManager());
        const spinner = sink_1.logger.await(sink_1.logger.colors.gray('configure @symfony/webpack-encore'));
        try {
            const response = await pkgFile.commitAsync();
            if (response && response.status === 1) {
                spinner.stop();
                sink_1.logger.fatal({ message: 'Unable to configure encore', stack: response.stderr.toString() });
            }
            else {
                spinner.stop();
                sink_1.logger.success('Configured encore successfully');
            }
        }
        catch (error) {
            spinner.stop();
            sink_1.logger.fatal(error);
        }
    }
    /**
     * Configure tests
     */
    async configureTests() {
        /**
         * Create "test.ts" file
         */
        const testsEntryPointFile = new sink_1.files.MustacheFile(this.application.appRoot, 'test.ts', (0, path_1.join)(__dirname, '..', 'templates/test-entrypoint.txt'));
        if (!testsEntryPointFile.exists()) {
            testsEntryPointFile.apply({}).commit();
            sink_1.logger.action('create').succeeded('test.ts');
        }
        /**
         * Create "tests/bootstrap.ts" file
         */
        const testsBootstrapFile = new sink_1.files.MustacheFile(this.application.appRoot, 'tests/bootstrap.ts', (0, path_1.join)(__dirname, '..', 'templates/tests/bootstrap.txt'));
        if (!testsBootstrapFile.exists()) {
            testsBootstrapFile.apply({}).commit();
            sink_1.logger.action('create').succeeded('tests/bootstrap.ts');
        }
        /**
         * Create "tests/functional/hello_world.spec.ts" file
         */
        const helloWorldTestFile = new sink_1.files.MustacheFile(this.application.appRoot, 'tests/functional/hello_world.spec.ts', (0, path_1.join)(__dirname, '..', `templates/tests/functional/hello_world_${this.appType}.spec.txt`));
        if (!helloWorldTestFile.exists()) {
            helloWorldTestFile.apply({}).commit();
            sink_1.logger.action('create').succeeded('tests/functional/hello_world.spec.ts');
        }
        /**
         * Create "contracts/tests.ts" file
         */
        const testsContractsFile = new sink_1.files.MustacheFile(this.application.appRoot, 'contracts/tests.ts', (0, path_1.join)(__dirname, '..', 'templates/tests-contract.txt'));
        if (!testsContractsFile.exists()) {
            testsContractsFile.apply({}).commit();
            sink_1.logger.action('create').succeeded('contracts/tests.ts');
        }
        /**
         * Update AdonisRc file with test suites
         */
        const rcFile = new sink_1.files.AdonisRcFile(this.application.appRoot);
        rcFile.set('tests', {
            suites: [
                {
                    name: 'functional',
                    files: ['tests/functional/**/*.spec(.ts|.js)'],
                    timeout: 60 * 1000,
                },
            ],
        });
        rcFile.addTestProvider('@japa/preset-adonis/TestsProvider');
        rcFile.commit();
        sink_1.logger.action('update').succeeded('.adonisrc.json');
        /**
         * Create ".env.test" file
         */
        const testEnvFile = new sink_1.files.NewLineFile(this.application.appRoot, '.env.test');
        if (!testEnvFile.exists()) {
            testEnvFile.add('NODE_ENV=test');
            /**
             * Set additional .env variables for "web" boilerplate
             */
            if (this.appType === 'web') {
                testEnvFile.add(['ASSETS_DRIVER=fake', 'SESSION_DRIVER=memory']);
            }
            testEnvFile.commit();
            sink_1.logger.action('create').succeeded('.env.test');
        }
        /**
         * Update "tsconfig.json"
         */
        const tsConfig = new sink_1.files.JsonFile(this.application.appRoot, 'tsconfig.json');
        const existingTypes = tsConfig.get('compilerOptions.types') || [];
        if (!existingTypes.includes('@japa/preset-adonis/build/adonis-typings')) {
            existingTypes.push('@japa/preset-adonis/build/adonis-typings');
        }
        tsConfig.set('compilerOptions.types', existingTypes);
        tsConfig.commit();
        sink_1.logger.action('update').succeeded('tsconfig.json');
        /**
         * Set additional .env variables for "web" boilerplate
         */
        if (this.appType === 'web') {
            testEnvFile.add(['ASSETS_DRIVER=fake', 'SESSION_DRIVER=memory']);
        }
        testEnvFile.commit();
        sink_1.logger.action('create').succeeded('.env.test');
        /**
         * Install required dependencies
         */
        const pkgFile = new sink_1.files.PackageJsonFile(this.application.appRoot);
        pkgFile.install('@japa/runner');
        pkgFile.install('@japa/preset-adonis');
        pkgFile.useClient(this.getPackageManager());
        const spinner = sink_1.logger.await(sink_1.logger.colors.gray('installing @japa/runner, @japa/preset-adonis'));
        try {
            const response = await pkgFile.commitAsync();
            if (response && response.status === 1) {
                spinner.stop();
                sink_1.logger.fatal({
                    message: 'Unable to configure tests runner',
                    stack: response.stderr.toString(),
                });
            }
            else {
                spinner.stop();
                sink_1.logger.success('Configured tests runner successfully');
            }
        }
        catch (error) {
            spinner.stop();
            sink_1.logger.fatal(error);
        }
    }
    /**
     * Configure a give package
     */
    async configurePackage(name) {
        if (name === 'encore') {
            await this.configureEncore();
            return;
        }
        if (name === 'tests') {
            await this.configureTests();
            return;
        }
        await new sink_1.tasks.Instructions(name, this.application.appRoot, this.application, true).execute();
        await new Manifest_1.Manifest(this.application.appRoot, this.logger).generate();
    }
    /**
     * Invoked automatically by ace
     */
    async run() {
        for (let name of this.packages) {
            await this.configurePackage(name);
        }
    }
}
Configure.commandName = 'configure';
Configure.description = 'Configure one or more AdonisJS packages';
Configure.aliases = ['invoke'];
__decorate([
    standalone_1.args.spread({
        description: 'Name of the package(s) you want to configure',
    }),
    __metadata("design:type", Array)
], Configure.prototype, "packages", void 0);
exports.default = Configure;
