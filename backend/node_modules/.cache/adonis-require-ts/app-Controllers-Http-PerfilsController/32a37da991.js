"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const Perfil_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Perfil"));
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
class PerfilsController {
    constructor() {
        this.validationOptions = {
            types: ['image'],
            size: '200mb',
        };
    }
    async store({ request, response }) {
        const body = request.body();
        const image = request.file('image', this.validationOptions);
        if (image) {
            const imageName = (0, uuid_1.v4)() + '.' + image.extname;
            await image.move(Application_1.default.tmpPath('uploads'), {
                name: imageName
            });
            body.image = imageName;
        }
        const perfil = await Perfil_1.default.create(body);
        response.status(201);
        return {
            message: 'Perfil criado com sucesso!',
            data: perfil,
        };
    }
    async index() {
        const perfils = await Perfil_1.default.all();
        return {
            data: perfils
        };
    }
    async show({ params }) {
        const perfil = await Perfil_1.default.findOrFail(params.id);
        return {
            data: perfil
        };
    }
    async destroy({ params }) {
        const perfil = await Perfil_1.default.findOrFail(params.id);
        await perfil.delete();
        return {
            message: 'Momento excluido com sucesso!',
            data: perfil,
        };
    }
    async update({ params, request }) {
        const body = request.body();
        const perfil = await Perfil_1.default.findOrFail(params.id);
        perfil.nome = body.nome;
        perfil.idade = body.idade;
        perfil.genero = body.genero;
        perfil.email = body.email;
        perfil.senha = body.senha;
        if (perfil.image != body.image || !perfil.image) {
            const image = request.file('image', this.validationOptions);
            if (image) {
                const imageName = (0, uuid_1.v4)() + '.' + image.extname;
                await image.move(Application_1.default.tmpPath('uploads'), {
                    name: imageName
                });
                body.image = imageName;
            }
        }
        await perfil.save();
        return {
            message: "Perfil atualizado com sucesso!",
            data: perfil,
        };
    }
}
exports.default = PerfilsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVyZmlsc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQZXJmaWxzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLCtCQUFtQztBQUluQyxxRkFBc0M7QUFFdEMsZ0dBQXNEO0FBRXRELE1BQXFCLGlCQUFpQjtJQUF0QztRQUNZLHNCQUFpQixHQUFHO1lBQ3hCLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUNoQixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFBO0lBcUZMLENBQUM7SUFuRlUsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQ3pELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUUzQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUUzRCxJQUFJLEtBQUssRUFBRTtZQUNQLE1BQU0sU0FBUyxHQUFHLElBQUEsU0FBTSxHQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUE7WUFFaEQsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUM3QyxJQUFJLEVBQUUsU0FBUzthQUNsQixDQUFDLENBQUE7WUFFRixJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQTtTQUN6QjtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0JBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFeEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUdwQixPQUFPO1lBQ0gsT0FBTyxFQUFFLDRCQUE0QjtZQUNyQyxJQUFJLEVBQUUsTUFBTTtTQUNmLENBQUE7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUs7UUFDZCxNQUFNLE9BQU8sR0FBRyxNQUFNLGdCQUFNLENBQUMsR0FBRyxFQUFFLENBQUE7UUFFbEMsT0FBTztZQUNILElBQUksRUFBRSxPQUFPO1NBQ2hCLENBQUE7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBdUI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7UUFFakQsT0FBTztZQUNILElBQUksRUFBRSxNQUFNO1NBQ2YsQ0FBQTtJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUF1QjtRQUNoRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVqRCxNQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUVyQixPQUFPO1lBQ0gsT0FBTyxFQUFFLCtCQUErQjtZQUN4QyxJQUFJLEVBQUUsTUFBTTtTQUNmLENBQUE7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQXVCO1FBQ3hELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUUzQixNQUFNLE1BQU0sR0FBRyxNQUFNLGdCQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUVqRCxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUE7UUFDdkIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBQ3pCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMzQixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7UUFDekIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBRXpCLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUM3QyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtZQUMzRCxJQUFJLEtBQUssRUFBRTtnQkFDUCxNQUFNLFNBQVMsR0FBRyxJQUFBLFNBQU0sR0FBRSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFBO2dCQUVoRCxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMscUJBQVcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzdDLElBQUksRUFBRSxTQUFTO2lCQUNsQixDQUFDLENBQUE7Z0JBRUYsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUE7YUFDekI7U0FFSjtRQUVELE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1FBRW5CLE9BQU87WUFDSCxPQUFPLEVBQUUsZ0NBQWdDO1lBQ3pDLElBQUksRUFBRSxNQUFNO1NBQ2YsQ0FBQTtJQUNMLENBQUM7Q0FDSjtBQXpGRCxvQ0F5RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xuXG5pbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuXG5pbXBvcnQgUGVyZmlsIGZyb20gJ0FwcC9Nb2RlbHMvUGVyZmlsJ1xuXG5pbXBvcnQgQXBwbGljYXRpb24gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9BcHBsaWNhdGlvbidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyZmlsc0NvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgdmFsaWRhdGlvbk9wdGlvbnMgPSB7XG4gICAgICAgIHR5cGVzOiBbJ2ltYWdlJ10sXG4gICAgICAgIHNpemU6ICcyMDBtYicsXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHN0b3JlKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBjb25zdCBib2R5ID0gcmVxdWVzdC5ib2R5KClcblxuICAgICAgICBjb25zdCBpbWFnZSA9IHJlcXVlc3QuZmlsZSgnaW1hZ2UnLCB0aGlzLnZhbGlkYXRpb25PcHRpb25zKVxuXG4gICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VOYW1lID0gdXVpZHY0KCkgKyAnLicgKyBpbWFnZS5leHRuYW1lXG5cbiAgICAgICAgICAgIGF3YWl0IGltYWdlLm1vdmUoQXBwbGljYXRpb24udG1wUGF0aCgndXBsb2FkcycpLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogaW1hZ2VOYW1lXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBib2R5LmltYWdlID0gaW1hZ2VOYW1lXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwZXJmaWwgPSBhd2FpdCBQZXJmaWwuY3JlYXRlKGJvZHkpXG5cbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzKDIwMSlcblxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnUGVyZmlsIGNyaWFkbyBjb20gc3VjZXNzbyEnLFxuICAgICAgICAgICAgZGF0YTogcGVyZmlsLFxuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBpbmRleCgpIHtcbiAgICAgICAgY29uc3QgcGVyZmlscyA9IGF3YWl0IFBlcmZpbC5hbGwoKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiBwZXJmaWxzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc2hvdyh7IHBhcmFtcyB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIGNvbnN0IHBlcmZpbCA9IGF3YWl0IFBlcmZpbC5maW5kT3JGYWlsKHBhcmFtcy5pZClcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogcGVyZmlsXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGRlc3Ryb3koeyBwYXJhbXMgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgICAgICBjb25zdCBwZXJmaWwgPSBhd2FpdCBQZXJmaWwuZmluZE9yRmFpbChwYXJhbXMuaWQpXG5cbiAgICAgICAgYXdhaXQgcGVyZmlsLmRlbGV0ZSgpXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdNb21lbnRvIGV4Y2x1aWRvIGNvbSBzdWNlc3NvIScsXG4gICAgICAgICAgICBkYXRhOiBwZXJmaWwsXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKHsgcGFyYW1zLCByZXF1ZXN0IH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICAgICAgY29uc3QgYm9keSA9IHJlcXVlc3QuYm9keSgpXG5cbiAgICAgICAgY29uc3QgcGVyZmlsID0gYXdhaXQgUGVyZmlsLmZpbmRPckZhaWwocGFyYW1zLmlkKVxuXG4gICAgICAgIHBlcmZpbC5ub21lID0gYm9keS5ub21lXG4gICAgICAgIHBlcmZpbC5pZGFkZSA9IGJvZHkuaWRhZGVcbiAgICAgICAgcGVyZmlsLmdlbmVybyA9IGJvZHkuZ2VuZXJvXG4gICAgICAgIHBlcmZpbC5lbWFpbCA9IGJvZHkuZW1haWxcbiAgICAgICAgcGVyZmlsLnNlbmhhID0gYm9keS5zZW5oYVxuXG4gICAgICAgIGlmIChwZXJmaWwuaW1hZ2UgIT0gYm9keS5pbWFnZSB8fCAhcGVyZmlsLmltYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IHJlcXVlc3QuZmlsZSgnaW1hZ2UnLCB0aGlzLnZhbGlkYXRpb25PcHRpb25zKVxuICAgICAgICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VOYW1lID0gdXVpZHY0KCkgKyAnLicgKyBpbWFnZS5leHRuYW1lXG5cbiAgICAgICAgICAgICAgICBhd2FpdCBpbWFnZS5tb3ZlKEFwcGxpY2F0aW9uLnRtcFBhdGgoJ3VwbG9hZHMnKSwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbWFnZU5hbWVcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgYm9keS5pbWFnZSA9IGltYWdlTmFtZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBwZXJmaWwuc2F2ZSgpXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiUGVyZmlsIGF0dWFsaXphZG8gY29tIHN1Y2Vzc28hXCIsXG4gICAgICAgICAgICBkYXRhOiBwZXJmaWwsXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=