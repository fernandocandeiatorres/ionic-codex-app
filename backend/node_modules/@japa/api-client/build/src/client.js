"use strict";
/*
 * @japa/api-client
 *
 * (c) Japa.dev
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const macroable_1 = require("macroable");
const request_1 = require("./request");
/**
 * ApiClient exposes the API to make HTTP requests in context of
 * testing.
 */
class ApiClient extends macroable_1.Macroable {
    constructor(baseUrl, assert) {
        super();
        this.baseUrl = baseUrl;
        this.assert = assert;
    }
    /**
     * Remove all globally registered setup hooks
     */
    static clearSetupHooks() {
        this.hooksHandlers.setup = [];
        return this;
    }
    /**
     * Remove all globally registered teardown hooks
     */
    static clearTeardownHooks() {
        this.hooksHandlers.teardown = [];
        return this;
    }
    /**
     * Clear on request handlers registered using "onRequest"
     * method
     */
    static clearRequestHandlers() {
        this.onRequestHandlers = [];
        return this;
    }
    /**
     * Register a handler to be invoked everytime a new request
     * instance is created
     */
    static onRequest(handler) {
        this.onRequestHandlers.push(handler);
        return this;
    }
    /**
     * Register setup hooks. Setup hooks are called before the request
     */
    static setup(handler) {
        this.hooksHandlers.setup.push(handler);
        return this;
    }
    /**
     * Register teardown hooks. Teardown hooks are called before the request
     */
    static teardown(handler) {
        this.hooksHandlers.teardown.push(handler);
        return this;
    }
    /**
     * Register a custom cookies serializer
     */
    static cookiesSerializer(serailizer) {
        this.customCookiesSerializer = serailizer;
        return this;
    }
    /**
     * Create an instance of the request
     */
    request(endpoint, method) {
        const hooks = this.constructor.hooksHandlers;
        const requestHandlers = this.constructor.onRequestHandlers;
        const cookiesSerializer = this.constructor.customCookiesSerializer;
        let baseUrl = this.baseUrl;
        const envHost = process.env.HOST;
        const envPort = process.env.PORT;
        /**
         * Compute baseUrl from the HOST and the PORT env variables
         * when no baseUrl is provided
         */
        if (!baseUrl && envHost && envPort) {
            baseUrl = `http://${envHost}:${envPort}`;
        }
        const request = new request_1.ApiRequest({
            baseUrl,
            method,
            endpoint,
            hooks,
            serializers: { cookie: cookiesSerializer },
        }, this.assert);
        requestHandlers.forEach((handler) => handler(request));
        return request;
    }
    /**
     * Create an instance of the request for GET method
     */
    get(endpoint) {
        return this.request(endpoint, 'GET');
    }
    /**
     * Create an instance of the request for POST method
     */
    post(endpoint) {
        return this.request(endpoint, 'POST');
    }
    /**
     * Create an instance of the request for PUT method
     */
    put(endpoint) {
        return this.request(endpoint, 'PUT');
    }
    /**
     * Create an instance of the request for PATCH method
     */
    patch(endpoint) {
        return this.request(endpoint, 'PATCH');
    }
    /**
     * Create an instance of the request for DELETE method
     */
    delete(endpoint) {
        return this.request(endpoint, 'DELETE');
    }
    /**
     * Create an instance of the request for HEAD method
     */
    head(endpoint) {
        return this.request(endpoint, 'HEAD');
    }
    /**
     * Create an instance of the request for OPTIONS method
     */
    options(endpoint) {
        return this.request(endpoint, 'OPTIONS');
    }
}
exports.ApiClient = ApiClient;
/**
 * Properties required by the Macroable class
 */
ApiClient.macros = {};
ApiClient.getters = {};
/**
 * Invoked when a new instance of request is created
 */
ApiClient.onRequestHandlers = [];
/**
 * Hooks handlers to pass onto the request
 */
ApiClient.hooksHandlers = {
    setup: [],
    teardown: [],
};
