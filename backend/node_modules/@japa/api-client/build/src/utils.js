"use strict";
/*
 * @japa/api-client
 *
 * (c) Japa.dev
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dumpResponse = exports.dumpRequest = exports.dumpResponseBody = exports.dumpRequestBody = exports.dumpResponseHeaders = exports.dumpRequestHeaders = exports.dumpResponseCookies = exports.dumpRequestCookies = exports.dumpResponseError = exports.stackToError = void 0;
const util_1 = require("util");
const INSPECT_OPTIONS = { colors: true, depth: 2, showHidden: false };
/**
 * Convert error stack string to an error object.
 *
 * It is an expirement to use server error stack and convert
 * it to an actual error object.
 */
function stackToError(errorStack) {
    if (typeof errorStack === 'string' && /^\s*at .*(\S+:\d+|\(native\))/m.test(errorStack)) {
        const customError = new Error(errorStack.split('\n')[0]);
        customError.stack = errorStack;
        return customError;
    }
    return errorStack;
}
exports.stackToError = stackToError;
/**
 * Default implementation to print request errors
 */
function dumpResponseError(response) {
    /**
     * Attempt to convert error stack to a error object when status >= 500
     */
    if (response.status() >= 500 && response.hasError()) {
        console.log(`"error"   => ${(0, util_1.inspect)(stackToError(response.text()))}`);
        return;
    }
}
exports.dumpResponseError = dumpResponseError;
/**
 * Default implementation to log request cookies
 */
function dumpRequestCookies(request) {
    console.log(`"cookies"  => ${(0, util_1.inspect)(request.cookiesJar, INSPECT_OPTIONS)}`);
}
exports.dumpRequestCookies = dumpRequestCookies;
/**
 * Default implementation to log response cookies
 */
function dumpResponseCookies(response) {
    console.log(`"cookies"   => ${(0, util_1.inspect)(response.cookies(), INSPECT_OPTIONS)}`);
}
exports.dumpResponseCookies = dumpResponseCookies;
/**
 * Default implementation to log request headers
 */
function dumpRequestHeaders(request) {
    console.log(`"headers"  => ${(0, util_1.inspect)(request.request['header'], INSPECT_OPTIONS)}`);
}
exports.dumpRequestHeaders = dumpRequestHeaders;
/**
 * Default implementation to log response headers
 */
function dumpResponseHeaders(response) {
    console.log(`"headers"   => ${(0, util_1.inspect)(response.headers(), INSPECT_OPTIONS)}`);
}
exports.dumpResponseHeaders = dumpResponseHeaders;
/**
 * Default implementation to log request body
 */
function dumpRequestBody(request) {
    if (request.request['_data']) {
        console.log(`"body"     => ${(0, util_1.inspect)(request.request['_data'], INSPECT_OPTIONS)}`);
    }
}
exports.dumpRequestBody = dumpRequestBody;
/**
 * Default implementation to log response body
 */
function dumpResponseBody(response) {
    if (response.status() >= 500) {
        return;
    }
    if (response.hasBody()) {
        console.log(`"body"     => ${(0, util_1.inspect)(response.body(), INSPECT_OPTIONS)}`);
    }
    else if (response.text()) {
        console.log(`"text"     => ${(0, util_1.inspect)(response.text(), INSPECT_OPTIONS)}`);
    }
    if (response.hasFiles()) {
        const files = Object.keys(response.files()).reduce((result, fileName) => {
            result[fileName] = response.files()[fileName].toJSON();
            return result;
        }, {});
        console.log(`"files"    => ${(0, util_1.inspect)(files, INSPECT_OPTIONS)}`);
    }
}
exports.dumpResponseBody = dumpResponseBody;
/**
 * Default implementation to log request
 */
function dumpRequest(request) {
    console.log(`"request"  => ${(0, util_1.inspect)({
        method: request.request.method,
        endpoint: request.config.endpoint,
    }, INSPECT_OPTIONS)}`);
    console.log(`"qs"       => ${(0, util_1.inspect)(request.request['qs'], INSPECT_OPTIONS)}`);
}
exports.dumpRequest = dumpRequest;
/**
 * Default implementation to log response
 */
function dumpResponse(response) {
    console.log(`"response"  => ${(0, util_1.inspect)({
        status: response.status(),
    }, INSPECT_OPTIONS)}`);
}
exports.dumpResponse = dumpResponse;
